// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: myproto2.proto

/*
	Package benchmarks is a generated protocol buffer package.

	It is generated from these files:
		myproto2.proto

	It has these top-level messages:
		Myproto4
		Myproto3
*/
package benchmarks

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Myproto4 struct {
	F3 float64 `protobuf:"fixed64,3,opt,name=F3,proto3" json:"F3,omitempty"`
	F4 string  `protobuf:"bytes,4,opt,name=F4,proto3" json:"F4,omitempty"`
}

func (m *Myproto4) Reset()                    { *m = Myproto4{} }
func (m *Myproto4) String() string            { return proto.CompactTextString(m) }
func (*Myproto4) ProtoMessage()               {}
func (*Myproto4) Descriptor() ([]byte, []int) { return fileDescriptorMyproto2, []int{0} }

func (m *Myproto4) GetF3() float64 {
	if m != nil {
		return m.F3
	}
	return 0
}

func (m *Myproto4) GetF4() string {
	if m != nil {
		return m.F4
	}
	return ""
}

type Myproto3 struct {
	F1  bool      `protobuf:"varint,1,opt,name=F1,proto3" json:"F1,omitempty"`
	F2  float32   `protobuf:"fixed32,2,opt,name=F2,proto3" json:"F2,omitempty"`
	F3  float64   `protobuf:"fixed64,3,opt,name=F3,proto3" json:"F3,omitempty"`
	F4  string    `protobuf:"bytes,4,opt,name=F4,proto3" json:"F4,omitempty"`
	F5  []byte    `protobuf:"bytes,5,opt,name=F5,proto3" json:"F5,omitempty"`
	F6  int32     `protobuf:"varint,6,opt,name=F6,proto3" json:"F6,omitempty"`
	F7  int32     `protobuf:"varint,7,opt,name=F7,proto3" json:"F7,omitempty"`
	F8  int32     `protobuf:"varint,8,opt,name=F8,proto3" json:"F8,omitempty"`
	F9  int32     `protobuf:"varint,9,opt,name=F9,proto3" json:"F9,omitempty"`
	F10 int64     `protobuf:"varint,10,opt,name=F10,proto3" json:"F10,omitempty"`
	F11 int64     `protobuf:"varint,11,opt,name=F11,proto3" json:"F11,omitempty"`
	F12 uint32    `protobuf:"varint,12,opt,name=F12,proto3" json:"F12,omitempty"`
	F13 uint32    `protobuf:"varint,13,opt,name=F13,proto3" json:"F13,omitempty"`
	F14 uint32    `protobuf:"varint,14,opt,name=F14,proto3" json:"F14,omitempty"`
	F15 uint32    `protobuf:"varint,15,opt,name=F15,proto3" json:"F15,omitempty"`
	F16 uint64    `protobuf:"varint,16,opt,name=F16,proto3" json:"F16,omitempty"`
	F17 uint64    `protobuf:"varint,17,opt,name=F17,proto3" json:"F17,omitempty"`
	S0  *Myproto4 `protobuf:"bytes,18,opt,name=S0" json:"S0,omitempty"`
	F29 []string  `protobuf:"bytes,19,rep,name=F29" json:"F29,omitempty"`
}

func (m *Myproto3) Reset()                    { *m = Myproto3{} }
func (m *Myproto3) String() string            { return proto.CompactTextString(m) }
func (*Myproto3) ProtoMessage()               {}
func (*Myproto3) Descriptor() ([]byte, []int) { return fileDescriptorMyproto2, []int{1} }

func (m *Myproto3) GetF1() bool {
	if m != nil {
		return m.F1
	}
	return false
}

func (m *Myproto3) GetF2() float32 {
	if m != nil {
		return m.F2
	}
	return 0
}

func (m *Myproto3) GetF3() float64 {
	if m != nil {
		return m.F3
	}
	return 0
}

func (m *Myproto3) GetF4() string {
	if m != nil {
		return m.F4
	}
	return ""
}

func (m *Myproto3) GetF5() []byte {
	if m != nil {
		return m.F5
	}
	return nil
}

func (m *Myproto3) GetF6() int32 {
	if m != nil {
		return m.F6
	}
	return 0
}

func (m *Myproto3) GetF7() int32 {
	if m != nil {
		return m.F7
	}
	return 0
}

func (m *Myproto3) GetF8() int32 {
	if m != nil {
		return m.F8
	}
	return 0
}

func (m *Myproto3) GetF9() int32 {
	if m != nil {
		return m.F9
	}
	return 0
}

func (m *Myproto3) GetF10() int64 {
	if m != nil {
		return m.F10
	}
	return 0
}

func (m *Myproto3) GetF11() int64 {
	if m != nil {
		return m.F11
	}
	return 0
}

func (m *Myproto3) GetF12() uint32 {
	if m != nil {
		return m.F12
	}
	return 0
}

func (m *Myproto3) GetF13() uint32 {
	if m != nil {
		return m.F13
	}
	return 0
}

func (m *Myproto3) GetF14() uint32 {
	if m != nil {
		return m.F14
	}
	return 0
}

func (m *Myproto3) GetF15() uint32 {
	if m != nil {
		return m.F15
	}
	return 0
}

func (m *Myproto3) GetF16() uint64 {
	if m != nil {
		return m.F16
	}
	return 0
}

func (m *Myproto3) GetF17() uint64 {
	if m != nil {
		return m.F17
	}
	return 0
}

func (m *Myproto3) GetS0() *Myproto4 {
	if m != nil {
		return m.S0
	}
	return nil
}

func (m *Myproto3) GetF29() []string {
	if m != nil {
		return m.F29
	}
	return nil
}

func init() {
	proto.RegisterType((*Myproto4)(nil), "benchmarks.Myproto4")
	proto.RegisterType((*Myproto3)(nil), "benchmarks.Myproto3")
}
func (m *Myproto4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Myproto4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F3 != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.F3))))
		i += 8
	}
	if len(m.F4) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(len(m.F4)))
		i += copy(dAtA[i:], m.F4)
	}
	return i, nil
}

func (m *Myproto3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Myproto3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F1 {
		dAtA[i] = 0x8
		i++
		if m.F1 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.F2 != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.F2))))
		i += 4
	}
	if m.F3 != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.F3))))
		i += 8
	}
	if len(m.F4) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(len(m.F4)))
		i += copy(dAtA[i:], m.F4)
	}
	if len(m.F5) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(len(m.F5)))
		i += copy(dAtA[i:], m.F5)
	}
	if m.F6 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F6))
	}
	if m.F7 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F7))
	}
	if m.F8 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F8))
	}
	if m.F9 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F9))
	}
	if m.F10 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F10))
	}
	if m.F11 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F11))
	}
	if m.F12 != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F12))
	}
	if m.F13 != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F13))
	}
	if m.F14 != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F14))
	}
	if m.F15 != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F15))
	}
	if m.F16 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F16))
	}
	if m.F17 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.F17))
	}
	if m.S0 != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMyproto2(dAtA, i, uint64(m.S0.Size()))
		n1, err := m.S0.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.F29) > 0 {
		for _, s := range m.F29 {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintMyproto2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Myproto4) Size() (n int) {
	var l int
	_ = l
	if m.F3 != 0 {
		n += 9
	}
	l = len(m.F4)
	if l > 0 {
		n += 1 + l + sovMyproto2(uint64(l))
	}
	return n
}

func (m *Myproto3) Size() (n int) {
	var l int
	_ = l
	if m.F1 {
		n += 2
	}
	if m.F2 != 0 {
		n += 5
	}
	if m.F3 != 0 {
		n += 9
	}
	l = len(m.F4)
	if l > 0 {
		n += 1 + l + sovMyproto2(uint64(l))
	}
	l = len(m.F5)
	if l > 0 {
		n += 1 + l + sovMyproto2(uint64(l))
	}
	if m.F6 != 0 {
		n += 1 + sovMyproto2(uint64(m.F6))
	}
	if m.F7 != 0 {
		n += 1 + sovMyproto2(uint64(m.F7))
	}
	if m.F8 != 0 {
		n += 1 + sovMyproto2(uint64(m.F8))
	}
	if m.F9 != 0 {
		n += 1 + sovMyproto2(uint64(m.F9))
	}
	if m.F10 != 0 {
		n += 1 + sovMyproto2(uint64(m.F10))
	}
	if m.F11 != 0 {
		n += 1 + sovMyproto2(uint64(m.F11))
	}
	if m.F12 != 0 {
		n += 1 + sovMyproto2(uint64(m.F12))
	}
	if m.F13 != 0 {
		n += 1 + sovMyproto2(uint64(m.F13))
	}
	if m.F14 != 0 {
		n += 1 + sovMyproto2(uint64(m.F14))
	}
	if m.F15 != 0 {
		n += 1 + sovMyproto2(uint64(m.F15))
	}
	if m.F16 != 0 {
		n += 2 + sovMyproto2(uint64(m.F16))
	}
	if m.F17 != 0 {
		n += 2 + sovMyproto2(uint64(m.F17))
	}
	if m.S0 != nil {
		l = m.S0.Size()
		n += 2 + l + sovMyproto2(uint64(l))
	}
	if len(m.F29) > 0 {
		for _, s := range m.F29 {
			l = len(s)
			n += 2 + l + sovMyproto2(uint64(l))
		}
	}
	return n
}

func sovMyproto2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMyproto2(x uint64) (n int) {
	return sovMyproto2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Myproto4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyproto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Myproto4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Myproto4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.F3 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyproto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyproto2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyproto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Myproto3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyproto2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Myproto3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Myproto3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F1 = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.F2 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.F3 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyproto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMyproto2
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F5 = append(m.F5[:0], dAtA[iNdEx:postIndex]...)
			if m.F5 == nil {
				m.F5 = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F6", wireType)
			}
			m.F6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F7", wireType)
			}
			m.F7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F8", wireType)
			}
			m.F8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F8 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F9", wireType)
			}
			m.F9 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F9 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F10", wireType)
			}
			m.F10 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F10 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F11", wireType)
			}
			m.F11 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F11 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F12", wireType)
			}
			m.F12 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F12 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F13", wireType)
			}
			m.F13 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F13 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F14", wireType)
			}
			m.F14 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F14 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F15", wireType)
			}
			m.F15 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F15 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F16", wireType)
			}
			m.F16 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F16 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F17", wireType)
			}
			m.F17 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F17 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMyproto2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S0 == nil {
				m.S0 = &Myproto4{}
			}
			if err := m.S0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F29", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyproto2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F29 = append(m.F29, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyproto2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMyproto2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMyproto2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMyproto2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyproto2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMyproto2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMyproto2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMyproto2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMyproto2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMyproto2   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("myproto2.proto", fileDescriptorMyproto2) }

var fileDescriptorMyproto2 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd0, 0x3d, 0x4e, 0xeb, 0x40,
	0x10, 0xc0, 0xf1, 0x37, 0xe3, 0x24, 0xcf, 0xde, 0x24, 0xc6, 0x18, 0x8a, 0xa9, 0xac, 0x55, 0x44,
	0xb1, 0xa2, 0xb0, 0xe2, 0xf5, 0x57, 0xdc, 0x52, 0x6c, 0x47, 0xb3, 0x39, 0x01, 0x41, 0x48, 0x48,
	0x28, 0x04, 0x05, 0x1a, 0x6e, 0xc1, 0xb1, 0x28, 0x39, 0x02, 0x32, 0x17, 0x41, 0xde, 0xf1, 0x42,
	0x49, 0xe5, 0xf9, 0xff, 0xc6, 0xb2, 0xac, 0x11, 0xf1, 0xfe, 0xf5, 0xe9, 0x78, 0x78, 0x39, 0xe8,
	0xdc, 0x3d, 0x52, 0xb1, 0xbb, 0x7b, 0xbc, 0xbd, 0xdf, 0xdf, 0x1c, 0x1f, 0x9e, 0x57, 0x97, 0x22,
	0xbc, 0xe6, 0x6d, 0x95, 0xc6, 0x02, 0x4d, 0x49, 0x81, 0x04, 0x05, 0x16, 0x4d, 0xe9, 0xba, 0xa2,
	0x89, 0x04, 0x15, 0x59, 0x34, 0xd5, 0xaa, 0xc7, 0x9f, 0x97, 0x79, 0x59, 0x10, 0x48, 0x50, 0xa1,
	0x45, 0x53, 0xb8, 0xd6, 0x84, 0x12, 0x14, 0x5a, 0x34, 0xfa, 0xaf, 0x8f, 0xb9, 0xae, 0x69, 0x2a,
	0x41, 0x2d, 0x2c, 0x9a, 0xda, 0x75, 0x43, 0x33, 0x09, 0x6a, 0x6a, 0xd1, 0x34, 0xae, 0x5b, 0xfa,
	0x3f, 0x76, 0xeb, 0x7a, 0x43, 0xe1, 0xd8, 0x1b, 0xd7, 0x1d, 0x45, 0x63, 0x77, 0x69, 0x22, 0x02,
	0x53, 0xac, 0x49, 0x48, 0x50, 0x81, 0x1d, 0x46, 0x96, 0x82, 0xe6, 0x5e, 0x0a, 0x16, 0x4d, 0x0b,
	0x09, 0x6a, 0x39, 0x88, 0x66, 0x29, 0x69, 0xe9, 0xa5, 0x64, 0xa9, 0x28, 0xf6, 0x52, 0xb1, 0xd4,
	0x74, 0xe2, 0xa5, 0x66, 0x69, 0x28, 0x91, 0xa0, 0x26, 0x83, 0x34, 0x2c, 0x2d, 0x9d, 0x7a, 0x69,
	0xd3, 0x0b, 0x81, 0xdb, 0x35, 0xa5, 0x12, 0xd4, 0x5c, 0x9f, 0xe7, 0xbf, 0x17, 0xcf, 0xfd, 0xb9,
	0x2d, 0x6e, 0xf9, 0x1f, 0x75, 0x47, 0x67, 0x32, 0x50, 0x91, 0x1d, 0xc6, 0xab, 0xe4, 0xbd, 0xcf,
	0xe0, 0xa3, 0xcf, 0xe0, 0xb3, 0xcf, 0xe0, 0xed, 0x2b, 0xfb, 0xb7, 0x9b, 0xf1, 0xc5, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x73, 0x99, 0xa5, 0x3c, 0xc7, 0x01, 0x00, 0x00,
}
